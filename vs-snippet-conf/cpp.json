{
    "cpt-b": {
        "prefix": "cpt-b",
        "body": [
            "#include <bits/stdc++.h>\r",
            "\r",
            "#define mx 10000\r",
            "#define mod 1000007\r",
            "#define ll long long\r",
            "\r",
            "using namespace std;\r",
            "\r",
            "// fill_n(&a[0][0], ntc * ntc, -100);\r",
            "\r",
            "void optimize()\r",
            "{\r",
            "    ios_base::sync_with_stdio(0);\r",
            "    cin.tie(0);\r",
            "}\r",
            "\r",
            "void setupFileIO(string fin = \"input.txt\", string fout = \"output.txt\")\r",
            "{\r",
            "    freopen(fin.c_str(), \"r\", stdin);\r",
            "    freopen(fout.c_str(), \"w\", stdout);\r",
            "}\r",
            "\r",
            "void solve()\r",
            "{\r",
            "\r",
            "    int ntc;\r",
            "    cin >> ntc;\r",
            "\r",
            "    for (int tc = 0; tc < ntc; tc++)\r",
            "    {\r",
            "        string s;\r",
            "        cin >> s;\r",
            "        cout << s << \"\\n\";\r",
            "    }\r",
            "}\r",
            "\r",
            "int main()\r",
            "{\r",
            "    optimize();\r",
            "\r",
            "    solve();\r",
            "\r",
            "    return 0;\r",
            "}"
        ]
    },
    "grid-way4": {
        "prefix": "grid-way4",
        "body": [
            "#define way4                               \\\r",
            "    (int[4][2])                            \\\r",
            "    {                                      \\\r",
            "        {0, 1}, {1, 0}, {0, -1}, { -1, 0 } \\\r",
            "    }"
        ],
        "description": "4 way in grid"
    },
    "trie-cpp": {
        "prefix": "cpp-trie",
        "body": [
            "const int ALPHABET_SIZE = 26;\r",
            "\r",
            "struct TrieNode\r",
            "{\r",
            "    struct TrieNode *children[ALPHABET_SIZE];\r",
            "    bool isEndOfWord;\r",
            "\r",
            "    TrieNode()\r",
            "    {\r",
            "        isEndOfWord = false;\r",
            "        for (int i = 0; i < ALPHABET_SIZE; i++)\r",
            "        {\r",
            "            children[i] = nullptr;\r",
            "        }\r",
            "    }\r",
            "};\r",
            "\r",
            "class Trie\r",
            "{\r",
            "private:\r",
            "    TrieNode *root;\r",
            "\r",
            "public:\r",
            "    Trie()\r",
            "    {\r",
            "        root = new TrieNode();\r",
            "    }\r",
            "\r",
            "    void insert(struct TrieNode *root, string key)\r",
            "    {\r",
            "        struct TrieNode *pCrawl = root;\r",
            "\r",
            "        for (int i = 0; i < key.length(); i++)\r",
            "        {\r",
            "            int index = key[i] - 'a';\r",
            "            if (!pCrawl->children[index])\r",
            "            {\r",
            "                pCrawl->children[index] = new TrieNode();\r",
            "            }\r",
            "            pCrawl = pCrawl->children[index];\r",
            "        }\r",
            "\r",
            "        pCrawl->isEndOfWord = true;\r",
            "    }\r",
            "\r",
            "    bool search(struct TrieNode *root, string key)\r",
            "    {\r",
            "        struct TrieNode *pCrawl = root;\r",
            "\r",
            "        for (int i = 0; i < key.length(); i++)\r",
            "        {\r",
            "            int index = key[i] - 'a';\r",
            "            if (!pCrawl->children[index])\r",
            "                return false;\r",
            "\r",
            "            pCrawl = pCrawl->children[index];\r",
            "        }\r",
            "\r",
            "        return (pCrawl->isEndOfWord);\r",
            "    }\r",
            "\r",
            "    ~Trie()\r",
            "    {\r",
            "        delete root;\r",
            "    }\r",
            "};"
        ],
        "description": "Trie"
    },
    "lowerbound-comparator": {
        "prefix": "lowerbound-comparator",
        "body": [
            "class Solution\r",
            "{\r",
            "public:\r",
            "    static bool comp(const vector<int> &a, const vector<int> &b)\r",
            "    {\r",
            "        return a[0] < b[0];\r",
            "    }\r",
            "\r",
            "    vector<vector<int>> insert(vector<vector<int>> &intervals, vector<int> &newInterval)\r",
            "    {\r",
            "        int l = upper_bound(intervals.begin(), intervals.end(), newInterval, comp) - intervals.begin();\r",
            "        cout << l << \"\\n\";\r",
            "\r",
            "        return intervals;\r",
            "    }\r",
            "};"
        ],
        "description": "Comparator Lower Bound"
    },
    "manchers-algo": {
        "prefix": "manchers-algo",
        "body": [
            "void applyManchers(string s)\r",
            "{\r",
            "    int n = s.size();\r",
            "    string pS = \"#\";\r",
            "    for (int i = 0; i < n; i++)\r",
            "    {\r",
            "        pS += s[i];\r",
            "        pS += \"#\";\r",
            "    }\r",
            "\r",
            "    int N = pS.size(), center = 0, right = 0;\r",
            "    int Z[N + 5];\r",
            "    memset(Z, 0, sizeof Z);\r",
            "\r",
            "    for (int i = 0; i < N; i++)\r",
            "    {\r",
            "        if (i < right)\r",
            "            Z[i] = min(right - i, Z[2 * center - i]);\r",
            "\r",
            "        while (i + Z[i] + 1 < N && i - Z[i] - 1 >= 0 && pS[i + Z[i] + 1] == pS[i - Z[i] - 1])\r",
            "        {\r",
            "            Z[i]++;\r",
            "        }\r",
            "\r",
            "        if (i + Z[i] > right)\r",
            "        {\r",
            "            center = i;\r",
            "            right = +Z[i];\r",
            "        }\r",
            "    }\r",
            "\r",
            "    for (int i = 0; i < N; i++)\r",
            "    {\r",
            "        if (i & 1)\r",
            "            cout << pS[i] << \" \";\r",
            "        else\r",
            "            cout << \"# \";\r",
            "    }\r",
            "    cout << \"\\n\";\r",
            "\r",
            "    for (int i = 0; i < N + 1; i++)\r",
            "    {\r",
            "        cout << Z[i] << \" \";\r",
            "    }\r",
            "}"
        ],
        "description": "manchers-algo"
    }
}